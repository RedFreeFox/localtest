package org.bugManage.dao;

import java.util.List;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.bugManage.entity.Projectuser;
import org.hibernate.LockMode;
import org.springframework.context.ApplicationContext;
import org.springframework.orm.hibernate3.support.HibernateDaoSupport;

/**
 * A data access object (DAO) providing persistence and search support for
 * Projectuser entities. Transaction control of the save(), update() and
 * delete() operations can directly support Spring container-managed
 * transactions or they can be augmented to handle user-managed Spring
 * transactions. Each of these methods provides additional information for how
 * to configure it for the desired type of transaction control.
 * 
 * @see org.bugManage.entity.Projectuser
 * @author MyEclipse Persistence Tools
 */

public class ProjectuserDAO extends HibernateDaoSupport {
	private static final Log log = LogFactory.getLog(ProjectuserDAO.class);
	// property constants
	public static final String PROJECTUSERTYPE = "projectusertype";

	protected void initDao() {
		// do nothing
	}

	public void save(Projectuser transientInstance) {
		log.debug("saving Projectuser instance");
		try {
			getHibernateTemplate().save(transientInstance);
			log.debug("save successful");
		} catch (RuntimeException re) {
			log.error("save failed", re);
			throw re;
		}
	}

	public void delete(Projectuser persistentInstance) {
		log.debug("deleting Projectuser instance");
		try {
			getHibernateTemplate().delete(persistentInstance);
			log.debug("delete successful");
		} catch (RuntimeException re) {
			log.error("delete failed", re);
			throw re;
		}
	}

	public Projectuser findById(java.lang.Long id) {
		log.debug("getting Projectuser instance with id: " + id);
		try {
			Projectuser instance = (Projectuser) getHibernateTemplate().get(
					"org.bugManage.entity.Projectuser", id);
			return instance;
		} catch (RuntimeException re) {
			log.error("get failed", re);
			throw re;
		}
	}

	public List findByExample(Projectuser instance) {
		log.debug("finding Projectuser instance by example");
		try {
			List results = getHibernateTemplate().findByExample(instance);
			log.debug("find by example successful, result size: "
					+ results.size());
			return results;
		} catch (RuntimeException re) {
			log.error("find by example failed", re);
			throw re;
		}
	}

	public List findByProperty(String propertyName, Object value) {
		log.debug("finding Projectuser instance with property: " + propertyName
				+ ", value: " + value);
		try {
			String queryString = "from Projectuser as model where model."
					+ propertyName + "= ?";
			return getHibernateTemplate().find(queryString, value);
		} catch (RuntimeException re) {
			log.error("find by property name failed", re);
			throw re;
		}
	}
	

	
	public List findByProjectId(Long projectid) {
		try {
//			String queryString = "select p.projectusertype,p.userinfo.name from fetch Projectuser as p where p.project.projectid=? group by p.projectusertype,p.userinfo.name";
			String queryString = "from Projectuser as model where model.project.projectid=?";
			return getHibernateTemplate().find(queryString,new Object[]{projectid});
		} catch (RuntimeException re) {
			log.error("find by property name failed", re);
			throw re;
		}
	}

	public List findByProjectusertype(Object projectusertype) {
		return findByProperty(PROJECTUSERTYPE, projectusertype);
	}

	public List findAll() {
		log.debug("finding all Projectuser instances");
		try {
			String queryString = "from Projectuser";
			return getHibernateTemplate().find(queryString);
		} catch (RuntimeException re) {
			log.error("find all failed", re);
			throw re;
		}
	}

	public List findProAndType(Long ProID,Long Type) {
		log.debug("finding all Projectuser instances");
		try {
			String queryString = "from Projectuser where ProjectID="+ProID+" and ProjectUserType="+Type;
			return getHibernateTemplate().find(queryString);
		} catch (RuntimeException re) {
			log.error("find all failed", re);
			throw re;
		}
	}
	
	
	public Projectuser merge(Projectuser detachedInstance) {
		log.debug("merging Projectuser instance");
		try {
			Projectuser result = (Projectuser) getHibernateTemplate().merge(
					detachedInstance);
			log.debug("merge successful");
			return result;
		} catch (RuntimeException re) {
			log.error("merge failed", re);
			throw re;
		}
	}

	public void attachDirty(Projectuser instance) {
		log.debug("attaching dirty Projectuser instance");
		try {
			getHibernateTemplate().saveOrUpdate(instance);
			log.debug("attach successful");
		} catch (RuntimeException re) {
			log.error("attach failed", re);
			throw re;
		}
	}

	public void attachClean(Projectuser instance) {
		log.debug("attaching clean Projectuser instance");
		try {
			getHibernateTemplate().lock(instance, LockMode.NONE);
			log.debug("attach successful");
		} catch (RuntimeException re) {
			log.error("attach failed", re);
			throw re;
		}
	}

	public static ProjectuserDAO getFromApplicationContext(
			ApplicationContext ctx) {
		return (ProjectuserDAO) ctx.getBean("ProjectuserDAO");
	}
}