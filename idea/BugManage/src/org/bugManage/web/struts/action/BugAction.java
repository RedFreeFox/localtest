/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package org.bugManage.web.struts.action;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.bugManage.entity.Basedataitem;
import org.bugManage.entity.Bug;
import org.bugManage.entity.Bugedition;
import org.bugManage.entity.Bughistory;
import org.bugManage.entity.Project;
import org.bugManage.entity.Projectmodel;
import org.bugManage.entity.Role;
import org.bugManage.entity.Userinfo;
import org.bugManage.format.dateFormat;
import org.bugManage.service.BugService;
import org.bugManage.service.UserInfoService;
import org.bugManage.web.struts.form.BugForm;

/** 
 * MyEclipse Struts
 * Creation date: 02-23-2012
 * 
 * XDoclet definition:
 * @struts.action path="/bug" name="bugForm" input="/index.jsp" parameter="method" scope="request" validate="true"
 */
public class BugAction extends DispatchAction {
	private dateFormat df=new dateFormat();
	private BugService bugService;
	private UserInfoService userinfoService;
	private List<Bug> BugList=new ArrayList<Bug>();
	public BugService getBugService() {
		return bugService;
	}
	public void setBugService(BugService bugService) {
		this.bugService = bugService;
	}
	public UserInfoService getUserinfoService() {
		return userinfoService;
	}
	public void setUserinfoService(UserInfoService userinfoService) {
		this.userinfoService = userinfoService;
	}
	private HttpSession session;
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	//查询入口
	public ActionForward requestType(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		//通过session存值，判断接下来使用的方法
		session=request.getSession();
		String requestType=session.getAttribute("requestType").toString();
		if(requestType.equals("model")){
			return findByModel(mapping, form, request, response);
		}else if(requestType.equals("sort")){
			return sortBug(mapping, form, request, response);
		}else if(requestType.equals("sear")){
			return findByType(mapping, form, request, response);
		}else{
			return null;
		}
	}
	
	//	分页按模块查找
	public ActionForward findByModel(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		session=request.getSession();
		session.setAttribute("requestType", "model");

		//----------------------------------------------------
		//获取选中模块
		Long Model;
		if(request.getParameter("Model")==null){
			Model=new Long(request.getAttribute("Model").toString());
		}else{
			Model=new Long(request.getParameter("Model"));
		}
		//每页显示条数
		Long number=new Long(5);
		//获取分页
		Long page=new Long(1);
		//获取页码
		Long MaxPage=bugService.pageByModel(Model,number);
		if(request.getParameter("page")!=null){
			page=new Long(request.getParameter("page"));
			if(page<=0){
				page=new Long (1);
			}else if(page>=MaxPage){
				page=MaxPage;
			}
		}
		request.setAttribute("page", page);
		request.setAttribute("MaxPage", MaxPage);
		request.setAttribute("Model", Model);
		//----------------------------------------------------------
		BugList=bugService.findByModel(Model,page, number);
		BugRole(mapping, form, request, response);
		Projectmodel pm=bugService.findModelIdToModel(Model);
		request.setAttribute("ProID",pm.getProject().getProjectid());
		request.setAttribute("buglist", BugList);
		//----
		//---每次按模块查询的时候获取权限
		Userinfo ui=(Userinfo)session.getAttribute("user");
		List<Role> role=userinfoService.findRoleByProIDAndUserId(pm.getProject().getProjectid(), ui.getUserid());
		session.setAttribute("role", role);
		
		//获取页面UI
		queryaUI(mapping, form, request, response);
		//转到显示页面action
		return mapping.findForward("showBugShow");
	}
	//按ID查找
	public ActionForward findByIdsear(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Long bugid=new Long(request.getParameter("bugid"));
		Long Model=new Long(request.getParameter("Model"));
		BugList=bugService.findBugByBUGID(Model,bugid);
		BugRole(mapping, form, request, response);
		request.setAttribute("page", 1);
		request.setAttribute("MaxPage", 1);
		request.setAttribute("Model", Model);
		Projectmodel pm=bugService.findModelIdToModel(Model);
		request.setAttribute("ProID",pm.getProject().getProjectid());
		request.setAttribute("buglist", BugList);
		request.setAttribute("BugIDs", bugid);
		//获取页面UI
		queryaUI(mapping, form, request, response);
		return mapping.findForward("showBugShow");
	}
	//按条件查找
	public ActionForward findByType(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		session=request.getSession();
		session.setAttribute("requestType", "sear");
		//获取选中模块
		//界面读取判断
		Long BugID=null;
		if(request.getParameter("BugID")==null||request.getParameter("BugID").equals("")){
			BugID=null;
		}else{
			BugID=new Long(request.getParameter("bugid"));
			request.setAttribute("BugIDs", BugID);
		}
		Long Tester=null;
		if(request.getParameter("Tester")==null||request.getParameter("Tester").equals("---请选择---")){
			Tester=null;
		}else{
			Tester=new Long(request.getParameter("Tester"));
			request.setAttribute("Testers", Tester);
		}
		Long Principal=null;
		if(request.getParameter("Principal")==null||request.getParameter("Principal").equals("---请选择---")){
			Principal=null;
		}else{
			Principal=new Long(request.getParameter("Principal"));
			request.setAttribute("Principals", Principal);
		}
		Long Status=null;
		if(request.getParameter("Status")==null||request.getParameter("Status").equals("---请选择---")){
			Status=null;
		}else{
			Status=new Long(request.getParameter("Status"));
			request.setAttribute("Statuss", Status);
		}
		String Summary=null;
		if(request.getParameter("Summary")==null||request.getParameter("Summary").equals("")){
			Summary=null;
		}else{
			Summary=request.getParameter("Summary");
			request.setAttribute("Summarys", Summary);
		}
		String StarDate=null;
		if(request.getParameter("StarDate")==null||request.getParameter("StarDate").equals("2000-01-01 12:00:00")){
			StarDate=null;
		}else{
			StarDate=request.getParameter("StarDate");
			request.setAttribute("StarDates", StarDate);
		}
		String OverDate=null;
		if(request.getParameter("OverDate")==null||request.getParameter("OverDate").equals("2000-01-01 12:00:00")){
			OverDate=null;
		}else{
			OverDate=request.getParameter("OverDate");
			request.setAttribute("OverDates", OverDate);
		}
		//----------------------------------------------------
		//获取选中BUGid
		Long Model=new Long(request.getParameter("Model"));

		//每页显示条数
		Long number=new Long(5);
		//获取分页
		Long page=new Long(1);
		//获取页码
		Long MaxPage=bugService.pageByType(BugID, Tester, Principal, Status, Summary, StarDate, OverDate,number,Model);
		if(request.getParameter("page")!=null){
			page=new Long(request.getParameter("page"));
			if(page<=0){
				page=new Long (1);
			}else if(page>=MaxPage){
				page=MaxPage;
			}
		}
		request.setAttribute("page", page);
		request.setAttribute("MaxPage", MaxPage);
		//----------------------------------------------------------
		BugList=bugService.findByType(BugID, Tester, Principal, Status, Summary, StarDate, OverDate, page, number, Model);
		BugRole(mapping, form, request, response);
		Projectmodel ProModels=bugService.findModelIdToModel(Model);
		request.setAttribute("ProID", ProModels.getProject().getProjectid());
		request.setAttribute("buglist", BugList);
		//获取页面UI
		queryaUI(mapping, form, request, response);
		return mapping.findForward("showBugShow");
		
	}
	
	//查看BUG详细 以及反馈
	public ActionForward findByID(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		//获取选中BUGid
		Long bugId;
		if(request.getParameter("id")!=null){
			bugId=new Long(request.getParameter("id"));
		}else{
			bugId=new Long(request.getAttribute("id").toString());
		}
		Bug bug=bugService.findByID(bugId);
		//---获取用户再该BUG的权限
		HttpSession session = request.getSession();
		//获取用户名
		Userinfo ui=(Userinfo)session.getAttribute("user");
		if(bug.getUserinfoByTester().getUserid()==ui.getUserid()||bug.getUserinfoByTester().getUserid().equals(ui.getUserid())){
			bug.setTesterif(true);
		}
		if(bug.getUserinfoByPrincipal().getUserid()==ui.getUserid()||bug.getUserinfoByPrincipal().getUserid().equals(ui.getUserid())){
			bug.setPrincipalif(true);
		}
		//解析BUG字段
		
			if(bug.getLastreply()!=null){
				bug.setLastreplystr(bugService.findByDateIdAndValue("Reply", bug.getLastreply().toString()));
			}
			if(bug.getStatus()!=null){
				bug.setStatusstr(bugService.findByDateIdAndValue("Status", bug.getStatus().toString()));
			}
			if(bug.getTestphase()!=null){
				bug.setTestphasestr(bugService.findByDateIdAndValue("TestPhase", bug.getTestphase().toString()));
			}
			if(bug.getGravitylevel()!=null){
				bug.setGravitylevelstr(bugService.findByDateIdAndValue("GravityLevel", bug.getGravitylevel().toString()));
			}
			if(bug.getReappearance()!=null){
				bug.setReappearancestr(bugService.findByDateIdAndValue("Reappearance", bug.getReappearance().toString()));
			}
			if(bug.getPhase()!=null){
				bug.setPhasestr(bugService.findByDateIdAndValue("Phase", bug.getPhase().toString()));
			}
			if(bug.getPriority()!=null){
				bug.setPrioritystr(bugService.findByDateIdAndValue("Priority", bug.getPriority().toString()));
			}
			if(bug.getQualitycharacter()!=null){
				bug.setQualitycharacterstr(bugService.findByDateIdAndValue("QualityCharacter", bug.getQualitycharacter().toString()));
			}
		
		
		//反馈BUG。BUG所有反馈存放在BUG.Bughistories中
		request.setAttribute("bug", bug);

		//反馈UI
		//获取测试版本
		List<Bugedition> Bugedition=bugService.findEdition(bug.getProject().getProjectid());
		request.setAttribute("Bugedition", Bugedition);
		//引入阶段
		request.setAttribute("Phase", bugService.findByBasedataitem("Phase"));
	//测试阶段
		request.setAttribute("TestPhase", bugService.findByBasedataitem("TestPhase"));
	//严重程度
		request.setAttribute("GravityLevel", bugService.findByBasedataitem("GravityLevel"));
	//质量特性
		request.setAttribute("QualityCharacter", bugService.findByBasedataitem("QualityCharacter"));
	//再现程度
		request.setAttribute("Reapperarance", bugService.findByBasedataitem("Reapperarance"));
	//反馈类型
		//如果是项目经理，开发人员。显示前0-7数据。
		List<Basedataitem> Reply=bugService.findByBasedataitem("Reply");
		if(Reply.size()>7){
			Reply=Reply.subList(0, 6);
		}
		request.setAttribute("Reply", Reply);
	//优先级
		request.setAttribute("Priority", bugService.findByBasedataitem("Priority"));
	//BUG状态
		List<Basedataitem> Status=bugService.findByBasedataitem("Status");
		request.setAttribute("Status", Status.subList(1, Status.size()));
		//责任人
		request.setAttribute("Principal", bugService.UserInfoFindByProjectID(bug.getProject().getProjectid(),new Long(1)));
		return mapping.findForward("showBugView");
	}

	//排序
	public ActionForward sortBug(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		session=request.getSession();
		session.setAttribute("requestType", "sort");
		//------------------------
		//获取排序类型
		Long Type=new Long(request.getParameter("Type"));
		request.setAttribute("Type", Type);
		//获取选中BUGid
		Long Model=new Long(request.getParameter("Model"));
		//每页显示条数
		Long number=new Long(5);
		//获取分页
		Long page=new Long(1);
		//获取页码
		Long MaxPage=bugService.pagesoftBug(Model, number, Type);
		if(request.getParameter("page")!=null){
			page=new Long(request.getParameter("page"));
			if(page<=0){
				page=new Long (1);
			}else if(page>=MaxPage){
				page=MaxPage;
			}
		}
		request.setAttribute("page", page);
		request.setAttribute("MaxPage", MaxPage);
		BugList=bugService.softBug(Model, page, number, Type);
		BugRole(mapping, form, request, response);
		//----------------------------------------------------------
		Projectmodel ProModels=bugService.findModelIdToModel(Model);
		request.setAttribute("ProID", ProModels.getProject().getProjectid());
		request.setAttribute("buglist", BugList);
		//获取页面UI
		queryaUI(mapping, form, request, response);
		return mapping.findForward("showBugShow");
	}
	//转到新建BUG页面
	public ActionForward addBugUI(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		//获取所有模块
			//获取项目ID
			Long Model=new Long(request.getParameter("Model").toString());
			Long ProID=bugService.findModelIdToModel(Model).getProject().getProjectid();
			List<Projectmodel> modellist=bugService.ProjectmodelfindByModel(ProID);
			request.setAttribute("modellist", modellist);
			request.setAttribute("Model", Model);
		//获取测试版本
			List<Bugedition> Bugedition=bugService.findEdition(ProID);
			request.setAttribute("Bugedition", Bugedition);
			
		//测试阶段
			request.setAttribute("TestPhase", bugService.findByBasedataitem("TestPhase"));
		//严重程度
			request.setAttribute("GravityLevel", bugService.findByBasedataitem("GravityLevel"));
		//质量特性
			request.setAttribute("QualityCharacter", bugService.findByBasedataitem("QualityCharacter"));
		//再现程度
			request.setAttribute("Reapperarance", bugService.findByBasedataitem("Reapperarance"));
		//责任人
			request.setAttribute("Principal", bugService.UserInfoFindByProjectID(ProID,new Long(1)));
		//测试人(页面上取session)
			HttpSession session=request.getSession();
			Userinfo ui=(Userinfo)session.getAttribute("user");
			request.setAttribute("user", ui.getName());
		//创建时间
			request.setAttribute("CreateTime", df.dateToString(new Date()));
		//转到新建BUG页面
		return mapping.findForward("showBugAdd");
	}
	//为BUG赋予身份//为BUG字段赋予解析
	public ActionForward BugRole(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		HttpSession session = request.getSession();
		//获取用户名
		Userinfo ui=(Userinfo)session.getAttribute("user");
		//为BUG赋予身份
		for(Bug b:BugList){
			if(b.getUserinfoByTester().getUserid()==ui.getUserid()||b.getUserinfoByTester().getUserid().equals(ui.getUserid())){
				b.setTesterif(true);
			}
			if(b.getUserinfoByPrincipal().getUserid()==ui.getUserid()||b.getUserinfoByPrincipal().getUserid().equals(ui.getUserid())){
				b.setPrincipalif(true);
			}
		}
		//解析BUG字段
		for(Bug b:BugList){
			if(b.getLastreply()!=null){
				b.setLastreplystr(bugService.findByDateIdAndValue("Reply", b.getLastreply().toString()));
			}
			if(b.getStatus()!=null){
				b.setStatusstr(bugService.findByDateIdAndValue("Status", b.getStatus().toString()));
			}
			if(b.getTestphase()!=null){
				b.setTestphasestr(bugService.findByDateIdAndValue("TestPhase", b.getTestphase().toString()));
			}
			if(b.getGravitylevel()!=null){
				b.setGravitylevelstr(bugService.findByDateIdAndValue("GravityLevel", b.getGravitylevel().toString()));
			}
			if(b.getReappearance()!=null){
				b.setReappearancestr(bugService.findByDateIdAndValue("Reappearance", b.getReappearance().toString()));
			}
			if(b.getPhase()!=null){
				b.setPhasestr(bugService.findByDateIdAndValue("Phase", b.getPhase().toString()));
			}
			if(b.getPriority()!=null){
				b.setPrioritystr(bugService.findByDateIdAndValue("Priority", b.getPriority().toString()));
			}
			if(b.getQualitycharacter()!=null){
				b.setQualitycharacterstr(bugService.findByDateIdAndValue("QualityCharacter", b.getQualitycharacter().toString()));
			}
		}
		return null;
	}
	
	//添加BUG
	public ActionForward addBug(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		BugForm bf=(BugForm)form;
		Bug bug=bf.getBug();
		HttpSession session=request.getSession();
		//获取责任人
		Long Principal=new Long(request.getParameter("Principal"));
		Userinfo ui=(Userinfo)session.getAttribute("user");
		//查询BUG所属模块
		Projectmodel Model=bugService.findModelIdToModel(bug.getProjectmodel().getProjectmodelid());
		request.setAttribute("Model", Model.getProjectmodelid());
		bug.getUserinfoByPrincipal().setUserid(Principal);
		bug.getProject().setProjectid(Model.getProject().getProjectid());
		bug.getUserinfoByTester().setUserid(ui.getUserid());
		bug.setCreatetime(df.dateToDate(new Date()));
		bugService.addBug(bug);
		//消息：添加成功
		return findByModel(mapping, form, request, response);
	}
	//删除BUG
	public ActionForward delBug(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Long Model=new Long(request.getParameter("model"));
		request.setAttribute("Model", Model);
		Long bugid=new Long(request.getParameter("bugid"));
		HttpSession session=request.getSession();
		Userinfo ui=(Userinfo)session.getAttribute("user");
		bugService.delBug(bugid, ui.getUserid());
		//消息：删除成功
		return findByModel(mapping, form, request, response);
	}
	//转到 更改BUG 页面
	public ActionForward SetBugUI(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		//获取旧信息
		Long bugid=new Long(request.getParameter("bugid"));
		Bug bug=bugService.findByID(bugid);
		Long Model=bug.getProjectmodel().getProjectmodelid();
		request.setAttribute("Model", Model);
		request.setAttribute("bug", bug);
		//获取项目模块信息
		Long ProID=bugService.findModelIdToModel(Model).getProject().getProjectid();
		List<Projectmodel> modellist=bugService.ProjectmodelfindByModel(ProID);
		request.setAttribute("modellist", modellist);
		request.setAttribute("Model", Model);
	//获取测试版本
		List<Bugedition> Bugedition=bugService.findEdition(ProID);
		request.setAttribute("Bugedition", Bugedition);
		
	//测试阶段
		request.setAttribute("TestPhase", bugService.findByBasedataitem("TestPhase"));
	//严重程度
		request.setAttribute("GravityLevel", bugService.findByBasedataitem("GravityLevel"));
	//质量特性
		request.setAttribute("QualityCharacter", bugService.findByBasedataitem("QualityCharacter"));
	//再现程度
		request.setAttribute("Reapperarance", bugService.findByBasedataitem("Reapperarance"));
	//责任人
		request.setAttribute("Principal", bugService.UserInfoFindByProjectID(ProID,new Long(1)));
	//测试人(页面上取session)
		HttpSession session=request.getSession();
		Userinfo ui=(Userinfo)session.getAttribute("user");
		request.setAttribute("user", ui.getName());
		return mapping.findForward("showBugUpdate");
	}
	//修改BUG
	public ActionForward setBug(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		BugForm bf=(BugForm)form;
		Long Model=new Long(request.getParameter("bug.projectmodel.projectmodelid"));
		request.setAttribute("Model", Model);
		//获取之前
		Long bugid=new Long(bf.getBug().getBugid());
		Bug bug=bugService.findByID(bugid);
		//获取测试版本
		String testversion=request.getParameter("bugeditionid");
		bug.setTestversion(df.stringToDate(testversion));
		//测试人不变
		bf.getBug();
		bug.setProjectmodel(bf.getBug().getProjectmodel());
		bug.setTestphase(bf.getBug().getTestphase());
		bug.setEnvironment(bf.getBug().getEnvironment());
		bug.setSummary(bf.getBug().getSummary());
		bug.setDetail(bf.getBug().getDetail());
		bug.setAnalyse(bf.getBug().getAnalyse());
		bug.setGravitylevel(bf.getBug().getGravitylevel());
		bug.setQualitycharacter(bf.getBug().getQualitycharacter());
		bug.setReappearance(bf.getBug().getReappearance());
		//获取责任人
		Long Principal=new Long(request.getParameter("Principal"));
		Userinfo Principals=new Userinfo();
		Principals.setUserid(Principal);
		bug.setUserinfoByPrincipal(Principals);
		bugService.setBug(bug);
		//消息：修改成功
		return findByModel(mapping, form, request, response);
	}
	//BUG反馈
	public ActionForward addHistory(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		BugForm bf=(BugForm)form;
		Bug bug=bf.getBug();
		Bug bugtemp=bugService.findByID(bug.getBugid());
		HttpSession session=request.getSession();
		Userinfo user=(Userinfo)session.getAttribute("user");
		Long Pro=bugtemp.getProject().getProjectid();
		//获取用户项目中身份
		Long Type=bugService.TypeFindByProIDAndUser(Pro, user.getUserid());
		//获取反馈信息
		Bughistory bh=new Bughistory();
		//BUGID
		bh.setBug(bug);
		//反馈人
		bh.getUserinfo().setUserid(user.getUserid());
		//描述
		bh.setDescribe(request.getParameter("describe"));
		//反馈时间
		bh.setCreatetime(df.dateToDate(new Date()));

		if(Type==0||Type.equals(0)){
			//项目经理
			//反馈类型
			bh.setReply(bug.getLastreply().toString());
			bh.setStatus(new Long(3));
			bugService.addHistoryByItemManager(bug, bh);
		}else if(Type==1||Type.equals(1)){
			//开发
			//反馈类型
			bh.setReply(bug.getLastreply().toString());
			bh.setStatus(new Long(3));
			bugService.addHistoryByDeveloper(bug, bh);
		}else if(Type==2||Type.equals(2)){
			//测试,修改状态
			bh.setStatus(bug.getStatus());
			//获取状态
			bugService.addHistoryByConnerPer(bug, bh);
		}
		request.setAttribute("id", bug.getBugid());
		//消息：添加成功
		return findByID(mapping, form, request, response);
	}
	
	//界面显示UI
	public ActionForward queryaUI(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		BugList=(List<Bug>)request.getAttribute("buglist");
		if(request.getParameter("Model")==null){
			request.setAttribute("Model", request.getAttribute("Model"));
		}else{
			request.setAttribute("Model", request.getParameter("Model"));
		}
		
		//描述数据截取
//		for(int i=0;i<buglist.size();i++){
//			if(buglist.get(i).getDetail().length()>24){
//				buglist.get(i).setDetail(buglist.get(i).getDetail().substring(0, 25)+"……");
//			}else{
//				buglist.get(i).setDetail(buglist.get(i).getDetail().substring(0, buglist.get(i).getDetail().length())+"……");
//			}
//		}
		
		request.setAttribute("buglist", BugList);
		Long ProID=new Long(request.getAttribute("ProID").toString());
		//测试人员
		List<Userinfo> Tester=bugService.UserInfoFindByProjectID(ProID, new Long(2));
		request.setAttribute("Tester", Tester);
		//开发人员/责任人
		List<Userinfo> Principal=bugService.UserInfoFindByProjectID(ProID, new Long(3));
		request.setAttribute("Principal", Principal);
		//状态
		List<Basedataitem> Status=bugService.findByBasedataitem("Status");
		request.setAttribute("Status", Status);
		return null;
	}
	//查看测试版本
	public ActionForward findEdition(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Long Model=new Long(request.getParameter("Model"));
		request.setAttribute("Model", Model);
		Projectmodel Promodel=bugService.findModelIdToModel(Model);
		//获取测试版本
		List<Bugedition> Bugedition=bugService.findEdition(Promodel.getProject().getProjectid());
		request.setAttribute("BugEdition", Bugedition);
		return mapping.findForward("edition");
	}
	//添加测试版本
	public ActionForward addEdition(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Long Model=new Long(request.getParameter("Model"));
		request.setAttribute("Model", Model);
		Projectmodel Promodel=bugService.findModelIdToModel(Model);
		String BugEditionName=request.getParameter("name");
		dateFormat df=new dateFormat();
		//时间转换
		Date BugEditionNameDate=df.stringToDate(BugEditionName);
		Bugedition bugEdition=new Bugedition();
		bugEdition.setBugeditionname(BugEditionNameDate);
		Project pro=new Project();
		pro.setProjectid(Promodel.getProject().getProjectid());
		bugEdition.setProject(pro);
		bugService.addBugEdition(bugEdition);
		return findEdition(mapping, form, request, response);
	} 
	//批量处理项目人员添加删除
	public ActionForward batchProjectUser(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Long ProID=new Long(request.getParameter("proID"));
		request.setAttribute("projectid", ProID);
		Long Type=new Long(request.getParameter("type"));
		String[] showPer=request.getParameterValues("showPer");
		List<Userinfo> user=new ArrayList<Userinfo>();
		if(showPer!=null){
			for(int i=0;i<showPer.length;i++){
				Userinfo ui=new Userinfo();
				ui.setUserid(new Long(showPer[i]));
				user.add(ui);
			}
		}else{
			user=new ArrayList<Userinfo>();
		}

		bugService.batchProjectUser(user, ProID, Type);
		return mapping.findForward("ToAdminProUsers");
	} 
	
	//获取所有项目
	public ActionForward showProjectAndModel(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		request.setAttribute("model", bugService.ProjectfindByAll());
		return mapping.findForward("test");
	}
	//修改责任人
	public ActionForward updatePrincipal(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Long bugid=new Long(request.getParameter("bugid"));
		Long principal= new Long(request.getParameter("principal"));
		HttpSession session = request.getSession();
		//获取用户名
		Userinfo ui=(Userinfo)session.getAttribute("user");
		bugService.setPrincipal(bugid, principal, ui.getUserid());
		request.setAttribute("id", bugid);
		return findByID(mapping, form, request, response);
	}
}